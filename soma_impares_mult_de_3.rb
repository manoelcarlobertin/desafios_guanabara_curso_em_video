# Eu percebi um padr√£o quanto aos m√∫ltiplos de 3 √≠mpares:
# por ex: os 10 primeiros m√∫ltiplos de 3: 3;6;9;12;15;18;21;24;27;30
# pode-se observar que o padr√£o * par, impar * se repete,
# por isso achei essa a maneira mais eficiente para esse caso:

# QUERO A SOMA DE IMPARES MULTIPLOS DE 3. A partir de 3

def generate_multiples_of_3_impar(limit)
  i = 3
  multiples = []
  while i <= limit
    multiples << i
    i += 6 # Corrigido para incrementar corretamente m√∫ltiplos de 3 √≠mpares.
  end
  multiples
end

puts '‚ú®' * 31
puts ''
puts "üî• Gerando m√∫ltiplos de 3 * s√≥ os √≠mpares * e salvando na lista! üî•"
puts ''
puts '‚ú®' * 31

multiples = generate_multiples_of_3_impar(500) # Defina um limite para evitar loop infinito

puts "üéØ M√∫ltiplos de 3 encontrados: #{multiples.join(' | ')} üöÄ"

puts "A soma dos m√∫ltiplos de 3 s√≥ os impares:"

sum_multiples = multiples.reduce(:+)
puts "Soma total √©: #{sum_multiples}"

puts ''
puts '‚ú®' * 31
puts ''
puts '‚úÖ Fim do script! ‚úÖ'
puts ''
puts '‚ú®' * 31

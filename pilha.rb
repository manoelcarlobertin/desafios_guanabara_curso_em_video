# Conceito de Pilha

# Uma pilha √© uma estrutura de dados que segue o princ√≠pio LIFO (Last In, First Out),

# ou seja, o √∫ltimo elemento a ser inserido √© o primeiro a ser removido.

# Neste * 1¬∫ problema *, a pilha √© usada para rastrear os par√™nteses abertos.

# Quando um par√™ntese fechado √© encontrado, verificamos se ele corresponde

# ao √∫ltimo par√™ntese aberto (que est√° no topo da pilha).


# Embora tenhamos usado um array para simular a pilha,
# poder√≠amos criar uma classe Pilha para encapsular as opera√ß√µes push e pop. Como abaixo:

#----------------------------------------------------------------------------------------------------
# class Pilha:
#   def __init__(self):
#       self.stack = []
#       # Nossa pilha √© uma lista vazia.
#   end

#   def push(self, item):
#       self.stack.append(item)
#       # A fun√ß√£o push adiciona um item ao topo da pilha.
#   end

#   def pop(self):
#       if self.is_empty():
#           return None
#           # Em vez de retornar um valor padr√£o,
#           # podemos lan√ßar uma exce√ß√£o quando a pilha est√° vazia.
#           raise Exception("Pilha vazia!")

#       return self.stack.pop()
#   end

#   def is_empty(self):
#       return len(self.stack) == 0
#   end
# end

#----------------------------------------------------------------------------------------------------


# O c√≥digo, logo abaixo, foi modularizado, com suporte para {}, [] e (),

# sa√≠das amig√°veis com emojis, tratamento de erros e uma interface clara para o usu√°rio.

# Cada parte do c√≥digo foi dividida em m√©todos * pequenos e reutiliz√°veis *

# para facilitar a manuten√ß√£o e a localiza√ß√£o de bugs.

# INICIO DO CODIGO

# frozen_string_literal: true

# M√≥dulo para mensagens amig√°veis
module Mensagens
  def self.mensagem(titulo, texto, cor = :azul)
    cores = {
      azul: "\e[34m",
      verde: "\e[32m",
      vermelho: "\e[31m",
      amarelo: "\e[33m",
      reset: "\e[0m"
    }
    emoji = ["üîç", "üìù"].sample
    puts "#{cores[cor]}#{titulo.center(100, '=')}#{cores[:reset]}"
    puts "#{emoji} #{texto} #{emoji}"
    puts "#{cores[cor]}#{'=' * 100}#{cores[:reset]}"
  end
end

# M√≥dulo para valida√ß√£o de: par√™nteses(), colchetes[] e chaves{}.
module ValidacaoParenteses
  PARES = { ')' => '(', '}' => '{', ']' => '[' }.freeze # Hash

  def self.balanceados?(expressao)
    pilha = [] # Array
    expressao.each_char do |caractere|
      if PARES.values.include?(caractere)
        # Se for um caractere de abertura, adiciona √† pilha
        pilha.push(caractere)
      elsif PARES.keys.include?(caractere)
        # Se for um caractere de fechamento, verifica se corresponde ao √∫ltimo aberto
        if pilha.empty? || pilha.last != PARES[caractere]
          return false, pilha
        else
          pilha.pop
        end
      end
    end
    # No final, se a pilha estiver vazia, todos os caracteres foram balanceados
    [pilha.empty?, pilha]
  end

  def self.corrigir_expressao(expressao, pilha)
    expressao_corrigida = expressao.dup
    # Adiciona os caracteres de fechamento que faltam
    pilha.reverse.each do |caractere|
      case caractere
      when '(' then expressao_corrigida += ')'
      when '{' then expressao_corrigida += '}'
      when '[' then expressao_corrigida += ']'
      end
    end
    expressao_corrigida
  end
end

# Fun√ß√£o principal
def main
  Mensagens.mensagem("Bem-vindo!", "Vamos verificar se os par√™nteses, colchetes e chaves est√£o balanceados!", :azul)
  puts "Exemplo de express√£o v√°lida: (a + b) * {c - [d + e]}. ‚úÖ"
  puts "Exemplo de express√£o inv√°lida: (a + b) * {c - [d + e}, pois faltou fechar o colchetes. ‚ùå"
  puts "=" * 100

  loop do
    print "Digite uma express√£o (ou 'sair' para encerrar): "
    expressao = gets.chomp

    if expressao.downcase == "sair"
      Mensagens.mensagem("Encerrando!", "Obrigado por usar o verificador de balanceamento! üëã", :amarelo)
      break
    end

    if expressao.empty?
      Mensagens.mensagem("Error", "Por favor, digite uma express√£o v√°lida.", :vermelho)
      next
    end

    balanceada, pilha = ValidacaoParenteses.balanceados?(expressao)

    if balanceada
      Mensagens.mensagem("Resultado", "A express√£o est√° \033[32m * balanceada * \033[m! üéâ", :verde)
    else
      Mensagens.mensagem("Resultado", "A express√£o est√° \033[31m * desbalanceada * \033[m! ‚ùå", :vermelho)

    # Mostra o que faltou para balancear
      if pilha.any?
        puts "Faltou fechar: #{pilha.reverse.map { |c| ValidacaoParenteses::PARES.key(c) }.join(', ')}"
      else
        puts "H√° par√™nteses, colchetes ou chaves fechados sem abertura correspondente."
      end

      # Corrige a express√£o e exibe
      expressao_corrigida = ValidacaoParenteses.corrigir_expressao(expressao, pilha)
      puts "Express√£o corrigida: \033[33m#{expressao_corrigida}\033[m"
    end
  end
end

# Executa o programa
main
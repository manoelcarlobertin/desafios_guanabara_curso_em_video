'''ğŸš€ O que mudou e por que Ã© mais eficiente?
âœ… Menos iteraÃ§Ãµes â†’ Testamos apenas atÃ© Math.sqrt(np), reduzindo o nÃºmero de verificaÃ§Ãµes.
âœ… Evitamos nÃºmeros pares desnecessÃ¡rios â†’ ApÃ³s 2, sÃ³ testamos nÃºmeros Ã­mpares.
âœ… Parada antecipada (break) â†’ Assim que encontramos um divisor, interrompemos o laÃ§o.'''

print 'Digite um nÃºmero para verificarmos: '
np = gets.to_i

# Tratamento de nÃºmeros menores que 2
if np < 2
  puts "O nÃºmero #{np} nÃ£o Ã© primo."
  exit
end

# 2 Ã© primo, caso especial
if np == 2
  puts "O nÃºmero #{np} Ã© primo."
  exit
end

# Se for par e maior que 2, jÃ¡ nÃ£o Ã© primo
if np.even?
  puts "O nÃºmero #{np} nÃ£o Ã© primo."
  exit
end

# Agora verificamos apenas nÃºmeros Ã­mpares atÃ© a raiz quadrada de np (cÃ³digo +eficiente)
limite = Math.sqrt(np).to_i
primo = true

(3..limite).step(2) do |c|
  if (np % c).zero? # verificarmos: 51 em diante...Ã­mpares...
    puts "O nÃºmero #{np} Ã© divisÃ­vel por #{c}." # O nÃºmero 51 Ã© divisÃ­vel por 3.
    primo = false # O nÃºmero 51 nÃ£o Ã© primo.
    break
  end
end

if primo
  puts "O nÃºmero #{np} Ã© primo."
else
  puts "O nÃºmero #{np} nÃ£o Ã© primo."
end

''' ğŸ”¥ OtimizaÃ§Ãµes:
ReduÃ§Ã£o do Intervalo de Busca:

Em vez de verificar atÃ© np, podemos verificar apenas atÃ© Math.sqrt(np).
Se np for divisÃ­vel por algum nÃºmero atÃ© sua raiz quadrada, entÃ£o nÃ£o Ã© primo.
Tratamento de Casos Especiais:

np < 2 nÃ£o Ã© primo.
np == 2 Ã© primo diretamente.
Evitamos testar nÃºmeros pares alÃ©m do 2, pois todos os outros pares sÃ£o divisÃ­veis por 2.'''
